#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Functions for parsing samplesheets
"""
import re
import csv
from collections import defaultdict
import json
import xml.etree.ElementTree as ET

class IEMFile(object):
    """
    Class for parsing an IEMFileVersion 4 SampleSheet.csv samplesheet used for Illumina NextSeq sequencer into a Python object

    Examples
    --------
    Example usage::

        x = "SampleSheet.csv"
        y = samplesheet.IEMFile(path = x)
        print(y)
        y.path
        # 'SampleSheet.csv'
        y.data['Data']['Samples']
        # ... list of sample dicts

    """
    def __init__(self, path):
        self.path = path
        self.data = self.load_data(path = self.path)

    def load_data(self, path = None):
        """
        Loads the data from the samplesheet into a dictionary

        Parameters
        ----------
        path: str
            path to the SampleSheet.csv file

        Returns
        -------
        dict
            a dictionary of the file contents
        """
        if not path:
            path = self.path
        data = defaultdict(dict)
        with open(path) as f:
            i = 0
            key = None
            for line in f:
                # check for key line
                if line.startswith('['):
                    # parse key name; "[Data],,,,,," -> "Data"
                    key = re.sub(r'^\[(.*)\].*$', r'\1', line.strip())
                    data[key]['line'] = i
                else:
                    # parse the line as an entry for the last active key
                    if key and key != "Data":
                        parts = line.strip().split(',')
                        if len(parts) > 0:
                            # first entry is the name of the values on the line
                            line_key = parts.pop(0)
                            # make sure its not an empty line
                            if line_key != '':
                                # check if there are any entries left that are not empty spreadsheet cells
                                if len([ p for p in parts if p != '' ]) > 0:
                                    data[key][line_key] = parts.pop(0)
                                else:
                                    data[key][line_key] = None
                i += 1

        # get the samples 'Data' from sheet
        data_line = data['Data']['line']
        data['Data']['Samples'] = []
        with open(path) as f:
            for i in range(data_line + 1):
                f.next()
            reader = csv.DictReader(f)
            for row in reader:
                data['Data']['Samples'].append(row)
        return(data)

    def __repr__(self):
        return(self)
    def __str__(self):
        return(json.dumps(self.data))
    def __len__(self):
        return(len(self.data))

class RunParametersXML(object):
    """
    Class for parsing a RunParameters.xml file generated by BaseSpace from an Illumnia NextSeq

    Examples
    --------
    Example usage::

        x = '/ifs/data/molecpathlab/quicksilver/180131_NB501073_0032_AHT5F3BGX3/RunParameters.xml'
        y = samplesheet.RunParametersXML(path = x)
        y.data
        # {'InstrumentID': 'NB501073', 'ComputerName': 'NEXTSEQ', 'OutputFolder': 'T:\\180131_NB501073_0032_AHT5F3BGX3\\', 'RunStartDate': '180131', 'RunNumber': '32', 'IsPairedEnd': 'true', 'BaseSpaceRunId': '63794731', 'RunID': '180131_NB501073_0032_AHT5F3BGX3', 'RunFolder': 'D:\\Illumina\\NextSeq Control Software Temp\\180131_NB501073_0032_AHT5F3BGX3\\', 'LibraryID': 'NS18-4', 'ExperimentName': 'NS18-4'}
    """
    def __init__(self, path, keys = None):
        self.path = path
        if not keys:
            self.keys = ['RunID', 'ExperimentName', 'LibraryID', 'IsPairedEnd',
                        'InstrumentID', 'RunStartDate', 'ComputerName',
                        'BaseSpaceRunId', 'RunNumber', 'OutputFolder', 'RunFolder']
        self.data = self.load_data(path = self.path)

    def load_data(self, path = None, keys = None):
        """
        Loads the data from the XML file

        Parameters
        ----------
        path: str
            path to the SampleSheet.csv file
        keys: list
            a list of XML keys to find values for

        Returns
        -------
        dict
            a dictionary of the file contents for the selected keys
        """
        if not path:
            path = self.path
        if not keys:
            keys = self.keys
        tree = ET.parse(path)
        root = tree.getroot()
        params_dict = {}
        for key in keys:
            params_dict[key] = root.find(key).text
        return(params_dict)


class SamplesFastqRawCSV(object):
    """
    Class for parsing a samples.fastq-raw.csv file generated by sns pipeline

    Examples
    --------
    Example usage::

        x = '/ifs/data/molecpathlab/NGS580_WES/NS17-02/results_2017-05-23_17-38-30/samples.fastq-raw.csv'
        y = samplesheet.SamplesFastqRawCSV(path = x)
        y.samples
        # ... list of samples ...

    """
    def __init__(self, path):
        self.path = path
        self.samples = self.load_samples(path = self.path)

    def load_samples(self, path = None):
        """
        Loads the samples from the samplesheet

        Parameters
        ----------
        path: str
            path to the samples.fastq-raw.csv file

        Returns
        -------
        list
            a list of the IDs for the samples in the sheet
        """
        if not path:
            path = self.path
        samples = set()
        with open(path) as f:
            for line in f:
                parts = line.strip().split(',')
                samples.add(parts[0])
        return(list(samples))

class SamplesPairsCSV(object):
    """
    Class for parsing a samples.pairs.csv file generated by sns pipeline

    Examples
    --------
    Example usage::

        x = '/ifs/data/molecpathlab/NGS580_WES/NS17-02/results_2017-05-23_17-38-30/samples.pairs.csv'
        y = samplesheet.SamplesPairsCSV(path = x)
        y.pairs
        # ... list of samples pairs dicts ...

    """
    def __init__(self, path):
        self.path = path
        self.pairs = self.load_pairs(path = self.path)

    def load_pairs(self, path = None):
        """
        Loads the sample pairs from the samplesheet

        Parameters
        ----------
        path: str
            path to the samples.pairs.csv file

        Returns
        -------
        list
            a list of dicts containing the Tumor - Normal pairs in the sheet
        """
        if not path:
            path = self.path
        pairs = []
        with open(path) as f:
            reader = csv.DictReader(f, delimiter = ',')
            for row in reader:
                sample = {}
                sample['Normal'] = row['#SAMPLE-N']
                sample['Tumor'] = row['#SAMPLE-T']
                # clean the contents
                for key, value in sample.items():
                    if value == 'NA':
                        sample[key] = None
                pairs.append(sample)
        return(pairs)
